openapi: 3.0.0
info:
  title: Zecommerce API
  description: Ecommerce of Seu ZÃ©
  version: 0.1.9
servers:
  - url: '{protocol}://api.{enviroment}.zecommerce.com'
    description: Ecommerce server production.
  - url: '{protocol}://api.{enviroment}.zecommerce.com'
    description: Ecommerce server staging.
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      enviroment:
        enum:
          - prd
          - qa
        default: qa
paths:
  /user:
    post:
      summary: Create new user.
      tags:
        - User
      parameters:
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '201':
          $ref: '#/components/responses/CreateUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Unexpected'
  /users:
    get:
      summary: Return a list all users.
      tags:
        - User
      parameters:
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: Return all users by query string.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                maxItems: 0
          headers: {}
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Unexpected'
  '/user/${userId}':
    get:
      summary: Create new user.
      tags:
        - User
      parameters:
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
        - name: userId
          in: path
          description: The ID of the user to return
          schema:
            type: string
            example: afc0f9fa-8622-4a6f-8637-9bd449ef5ecd
          required: true
      responses:
        '201':
          description: Return user by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayUsers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete user by id
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: string
            example: afc0f9fa-8622-4a6f-8637-9bd449ef5ecd
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
      responses:
        '204':
          description: Deleted User!
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Updated user by id.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to return
          schema:
            example: afc0f9fa-8622-4a6f-8637-9bd449ef5ecd
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '204':
          description: User has been updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unexpected'
  /product:
    post:
      summary: Create new product.
      tags:
        - Product
      parameters:
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
      requestBody:
        $ref: '#/components/requestBodies/ProductBody'
      responses:
        '201':
          $ref: '#/components/responses/CreateProduct'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/Unexpected'
  /products:
    get:
      summary: Return list of products.
      tags:
        - Product
      parameters:
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: Return all products.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                maxItems: 0
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/Unexpected'
  '/product/${productId}':
    get:
      summary: Return product by id
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the product to return
          schema:
            type: string
            example: afc0f9fa-8622-4a6f-8637-9bd449ef5ecd
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
      responses:
        '200':
          description: A Product Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete product by id
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the product to delete
          schema:
            type: string
            example: afc0f9fa-8622-4a6f-8637-9bd449ef5ecd
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
      responses:
        '204':
          description: Deleted Product
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Updated product by id.
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the product to return
          schema:
            example: afc0f9fa-8622-4a6f-8637-9bd449ef5ecd
        - in: header
          name: x-request-id
          schema:
            $ref: '#/components/headers/RequestID'
          required: true
      requestBody:
        $ref: '#/components/requestBodies/ProductBody'
      responses:
        '204':
          description: Product has been updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unexpected'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Camisa
        description:
          type: string
          example: Camisa Preta listrada
        price:
          type: integer
          format: int64
          minimum: 1
        SKU:
          type: integer
          format: int64
      required:
        - id
        - name
        - description
        - SKU
        - category
        - price
    Products:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Bob Dylan
        birthday:
          type: string
          example: '2010-10-15'
        email:
          type: string
          example: user@email.com
        password:
          type: string
          example: teste159
    ArrayUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    PaginatedResult:
      type: object
      properties:
        totalElements:
          type: number
          example: 10
        page:
          type: number
          example: 2
        per_page:
          type: number
          example: 4
        next:
          type: boolean
          example: false
        previous:
          type: boolean
          example: false
        results:
          type: array
          items: {}
  parameters:
    sortParam:
      in: query
      name: sort
      required: false
      schema:
        type: integer
        minimum: 0
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
  requestBodies:
    ProductBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    UserBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  headers:
    RequestID:
      schema:
        type: string
        format: uuid
  responses:
    CreateUser:
      description: User Success Created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    CreateProduct:
      description: Product Success Created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            Example 1:
              value:
                code: 404
                message: Not Found
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            Example 1:
              value:
                code: 401
                message: Unauthorized
    BadRequest:
      description: Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            Example 1:
              value:
                code: 400
                message: Bad Request
    Unexpected:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            Example 1:
              value:
                code: 500
                message: Internal server error
tags:
  - name: Product
    description: Everything about your Products
  - name: User
    description: Everything about your Users